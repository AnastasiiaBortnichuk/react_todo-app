{"version":3,"sources":["components/TodoItem/TodoItem.jsx","components/TodoList/TodoList.jsx","components/TodosFilter/TodosFilter.jsx","components/TodoApp/TodoApp.jsx","App.js","index.js"],"names":["TodoItem","id","title","completed","handleDelete","changeCompleted","changeTitle","useState","editing","setEditing","newTitle","setNewTitle","className","classNames","type","checked","onChange","onDoubleClick","onClick","autoFocus","defaultValue","event","target","value","trimLeft","onKeyDown","key","onBlur","TodoList","todos","map","todo","TodosFilter","all","active","filter","setFilter","href","selected","TodoApp","setTodos","query","setQuery","useEffect","JSON","parse","localStorage","getItem","setItem","stringify","FILTER","todosFiltered","useMemo","markAllCompleted","every","onSubmit","preventDefault","placeholder","onKeyUp","Date","length","htmlFor","some","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f848fa55.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nexport const TodoItem = ({\n  id, title, completed, handleDelete, changeCompleted, changeTitle,\n}) => {\n  const [editing, setEditing] = useState(false);\n  const [newTitle, setNewTitle] = useState('');\n\n  const handleChange = (event) => {\n    setNewTitle(event.target.value.trimLeft());\n  };\n\n  const handleEdit = (event) => {\n    if (event.key === 'Enter' && newTitle) {\n      changeTitle(id, newTitle);\n      setEditing(false);\n      setNewTitle('');\n    }\n\n    if (event.key === 'Escape') {\n      setNewTitle('');\n      setEditing(false);\n    }\n  };\n\n  const handleSaveChanges = () => {\n    if (newTitle) {\n      changeTitle(id, newTitle);\n      setEditing(false);\n      setNewTitle('');\n    } else {\n      setEditing(false);\n      setNewTitle('');\n    }\n  };\n\n  return (\n    <li\n      className={classNames({\n        completed,\n        editing,\n      })}\n    >\n      <div className=\"view\">\n        <input\n          type=\"checkbox\"\n          className=\"toggle\"\n          checked={completed}\n          onChange={() => changeCompleted(id)}\n        />\n        <label\n          onDoubleClick={() => setEditing(true)}\n        >\n          {title}\n        </label>\n        <button\n          type=\"button\"\n          className=\"destroy\"\n          onClick={() => handleDelete(id)}\n        />\n      </div>\n      {(editing === true) && (\n        <input\n          autoFocus\n          type=\"text\"\n          className=\"edit\"\n          defaultValue={title}\n          onChange={handleChange}\n          onKeyDown={handleEdit}\n          onBlur={handleSaveChanges}\n        />\n      )}\n    </li>\n  );\n};\n\nTodoItem.propTypes = {\n  id: PropTypes.number.isRequired,\n  title: PropTypes.string.isRequired,\n  completed: PropTypes.bool.isRequired,\n  changeTitle: PropTypes.func.isRequired,\n  changeCompleted: PropTypes.func.isRequired,\n  handleDelete: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { TodoItem } from '../TodoItem';\n\nexport const TodoList = ({\n  todos,\n  changeCompleted,\n  changeTitle,\n  handleDelete,\n}) => (\n  <ul className=\"todo-list\">\n    {todos.map(todo => (\n      <TodoItem\n        key={todo.id}\n        {...todo}\n        changeTitle={changeTitle}\n        handleDelete={handleDelete}\n        changeCompleted={changeCompleted}\n      />\n    ))}\n  </ul>\n);\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(\n    PropTypes.object.isRequired,\n  ).isRequired,\n  changeCompleted: PropTypes.func.isRequired,\n  changeTitle: PropTypes.func.isRequired,\n  handleDelete: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nexport const TodosFilter = ({ all, active, completed, filter, setFilter }) => (\n  <ul className=\"filters\">\n    <li>\n      <a\n        href=\"#/\"\n        className={classNames({\n          selected: filter === all,\n        })}\n        onClick={() => setFilter(all)}\n      >\n        {all}\n      </a>\n    </li>\n\n    <li>\n      <a\n        href=\"#/active\"\n        className={classNames({\n          selected: filter === active,\n        })}\n        onClick={() => setFilter(active)}\n      >\n        {active}\n      </a>\n    </li>\n\n    <li>\n      <a\n        href=\"#/completed\"\n        className={classNames({\n          selected: filter === completed,\n        })}\n        onClick={() => setFilter(completed)}\n      >\n        {completed}\n      </a>\n    </li>\n  </ul>\n);\n\nTodosFilter.propTypes = {\n  setFilter: PropTypes.func.isRequired,\n  filter: PropTypes.string.isRequired,\n  all: PropTypes.string.isRequired,\n  active: PropTypes.string.isRequired,\n  completed: PropTypes.string.isRequired,\n};\n","import React, { useState, useEffect, useMemo } from 'react';\nimport { TodoList } from '../TodoList';\nimport { TodosFilter } from '../TodosFilter';\n\nexport const TodoApp = () => {\n  const [todos, setTodos] = useState([]);\n  const [query, setQuery] = useState('');\n  const [filter, setFilter] = useState('All');\n\n  useEffect(() => {\n    if (JSON.parse(localStorage.getItem('todos'))) {\n      setTodos(JSON.parse(localStorage.getItem('todos')));\n    }\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem('todos', JSON.stringify(todos));\n  }, [todos]);\n\n  const FILTER = {\n    all: 'All',\n    active: 'Active',\n    completed: 'Completed',\n  };\n\n  const todosFiltered = useMemo(() => {\n    switch (filter) {\n      case FILTER.active:\n        return todos.filter(todo => !todo.completed);\n\n      case FILTER.completed:\n        return todos.filter(todo => todo.completed);\n\n      default:\n        return todos;\n    }\n  }, [todos, filter]);\n\n  const changeCompleted = (id) => {\n    setTodos(todos.map((todo) => {\n      if (todo.id !== id) {\n        return todo;\n      }\n\n      return {\n        ...todo,\n        completed: !todo.completed,\n      };\n    }));\n  };\n\n  const changeTitle = (id, newTitle) => {\n    setTodos(todos.map((todo) => {\n      if (todo.id !== id) {\n        return todo;\n      }\n\n      return {\n        ...todo,\n        title: newTitle,\n      };\n    }));\n  };\n\n  const markAllCompleted = () => {\n    if (todos.every(todo => todo.completed)) {\n      setTodos(todos.map(todo => ({ ...todo, completed: !todo.completed })));\n    } else {\n      setTodos(todos.map((todo) => {\n        if (!todo.completed) {\n          return { ...todo, completed: true };\n        }\n\n        return todo;\n      }));\n    }\n  };\n\n  const handleChange = (event) => {\n    setQuery(event.target.value.trimLeft());\n  };\n\n  const handleAdd = () => {\n    if (query) {\n      setTodos([{\n        id: +new Date(),\n        title: query,\n        completed: false,\n      }, ...todos]);\n      setQuery('');\n    }\n  };\n\n  const handleDelete = (id) => {\n    setTodos(\n      todos.filter(todo => todo.id !== id),\n    );\n  };\n\n  return (\n    <>\n      <header className=\"header\">\n        <h1>todos</h1>\n\n        <form onSubmit={(event) => {\n          event.preventDefault();\n        }}\n        >\n          <input\n            type=\"text\"\n            className=\"new-todo\"\n            placeholder=\"What needs to be done?\"\n            value={query}\n            onChange={handleChange}\n            onKeyUp={(event) => {\n              if (event.key === 'Enter') {\n                handleAdd();\n              }\n            }}\n          />\n        </form>\n      </header>\n\n      {todos.length > 0 && (\n        <>\n          <section className=\"main\">\n            <input\n              type=\"checkbox\"\n              id=\"toggle-all\"\n              className=\"toggle-all\"\n              onChange={markAllCompleted}\n              checked={todos.every(todo => todo.completed)}\n            />\n            <label htmlFor=\"toggle-all\">Mark all as complete</label>\n\n            <TodoList\n              todos={todosFiltered}\n              changeTitle={changeTitle}\n              handleDelete={handleDelete}\n              changeCompleted={changeCompleted}\n              markAllCompleted={markAllCompleted}\n            />\n\n          </section>\n\n          <footer className=\"footer\">\n            <span className=\"todo-count\">\n              {`${todos.filter(todo => !todo.completed).length} items left`}\n            </span>\n\n            <TodosFilter\n              todos={todos}\n              filter={filter}\n              {...FILTER}\n              setFilter={setFilter}\n            />\n\n            {(todos.some(todo => todo.completed)) && (\n              <button\n                type=\"button\"\n                className=\"clear-completed\"\n                onClick={() => setTodos(\n                  todos.filter(todo => !todo.completed),\n                )}\n              >\n                Clear completed\n              </button>\n            )}\n          </footer>\n        </>\n      )}\n    </>\n  );\n};\n","import React from 'react';\nimport { TodoApp } from './components/TodoApp';\n\nfunction App() {\n  return (\n    <section className=\"todoapp\">\n      <TodoApp />\n    </section>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './styles/index.css';\nimport './styles/todo-list.css';\nimport './styles/filters.css';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}